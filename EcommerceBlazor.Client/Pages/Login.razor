@page "/login"
@inject IAuthService authService
@inject ILocalStorageService localStorage
@inject NavigationManager navManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService
@using EcommerceBlazor.Shared;
@using Microsoft.AspNetCore.WebUtilities;
<h3>Login</h3>

<PageTitle>Login</PageTitle>

<EditForm Model="user" OnValidSubmit="HandleLogin">
	<DataAnnotationsValidator />
	<div class="mb-3">
		<label for="email">Email</label>
		<InputText id="email" @bind-Value="user.Email" class="form-control" />
		<ValidationMessage For="@(() => user.Email)"></ValidationMessage>
	</div>

	<div class="mb-3">
		<label for="password">Password</label>
		<InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
		<ValidationMessage For="@(() => user.Password)"></ValidationMessage>
	</div>

	<button type="submit" class="btn btn-outline-primary mb-2">Login</button>
	<br />
</EditForm>
<div class="text-danger">
	<soan>@errorMessage</soan>
</div>

@code {
	public UserLogin user = new UserLogin();
	public string errorMessage = string.Empty;
	public string returnUrl = string.Empty;

	protected override void OnInitialized()
	{
		var uri = navManager.ToAbsoluteUri(navManager.Uri);
		if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl" , out var url))
		{
			returnUrl = url;
		}

	}

	public async Task HandleLogin()
	{
		var result = await authService.Login(user);

		if (result.Success)
		{
			errorMessage = string.Empty;
			await localStorage.SetItemAsync("authToken", result.Data);
			await AuthenticationStateProvider.GetAuthenticationStateAsync();
			await CartService.StoreCartItems(true);
			await CartService.GetCartItemsCount();
			navManager.NavigateTo(returnUrl);
		}
		else
		{
			errorMessage = result.Message;
		}
	}
}

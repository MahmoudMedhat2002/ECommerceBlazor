@page "/admin/products"
@inject IProductService ProductService
@inject NavigationManager navManager
<h3>Products</h3>

@if(ProductService.AdminProducts == null)
{
	<span>Loading Products...</span>
}
else
{
	<button class="btn btn-success float-end" @onclick="CreateProduct">
		<i class="oi oi-plus"></i> Create new product
	</button>
	<table class="table">
		<thead>
			<tr>
				<th></th>
				<th>Product</th>
				<th>Variant</th>
				<th>Price</th>
				<th>Visible</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			<Virtualize Items="ProductService.AdminProducts" Context="product">
				<tr>
					@if (!string.IsNullOrEmpty(product.ImageURL))
					{
						<td><img src="@product.ImageURL" /></td>
					}
					else if (product.Images.Count > 0)
					{
						<td><img src="@product.Images[0].Data" /></td>
					}
					<td>@product.Title</td>
					<td>
						@foreach(var variant in product.Variants)
						{
							<span>@variant.ProductType.Name</span><br />
						}
					</td>
					<td>
						@foreach (var variant in product.Variants)
						{
							<span>@variant.Price</span><br />
						}
					</td>
					<td>@(product.Visible ? "✔️" : "")</td>
					<td>
						<button class="btn btn-primary" @onclick="(() => EditProduct(product.Id))">
							<i class="oi oi-pencil"></i>
						</button>
					</td>
				</tr>
			</Virtualize>
		</tbody>
	</table>
}

@code {
	protected override async Task OnInitializedAsync()
	{
		await ProductService.GetAdminProducts();
	}

	void EditProduct(int productId)
	{
		navManager.NavigateTo($"admin/product/{productId}");
	}

	void CreateProduct()
	{
		navManager.NavigateTo($"admin/product");
	}
}

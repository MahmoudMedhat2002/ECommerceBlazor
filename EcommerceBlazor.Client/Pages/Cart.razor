@page "/cart"
@using EcommerceBlazor.Shared;
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService
@inject NavigationManager navManager

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if(cartProducts == null || cartProducts.Count == 0)
{
	<span>@Message</span>
}
else
{
	<div>
		@foreach (var product in cartProducts)
		{
			<div class="container">
				<div class="image-wrapper">
					<img src="@product.ImageUrl" class="image"/>
				</div>

				<div class="name">
					<h5><a href="/product/@product.ProductId">@product.Title</a></h5>
					<span>@product.ProductType</span><br/>
					<input type="number" value="@product.Quantity" @onchange="@((ChangeEventArgs e) => UpdateQuantity(e , product))" class="form-control input-quantity" min="1"/>
					<button class="btn btn-outline-danger mt-2" @onclick="@(() => RemoveProductFromCart(product.ProductId , product.ProductTypeId))">Delete</button>
				</div>
				<div class="cart-product-price">$@(product.Price * product.Quantity)</div>

			</div>
		}

		<div class="cart-product-price">
			Total (@cartProducts.Count): $@cartProducts.Sum(p => p.Price * p.Quantity)
		</div>
	</div>
	@if (IsAuthenticated)
	{
		<div style="border:1px solid #eee; padding:10px; margin:7px;">
			<h5>Delivery Address</h5>
			<AddressForm></AddressForm>
		</div>
	}
	<button @onclick="PlaceOrder" class="btn btn-success mt-1 float-end">Checkout</button>
}



@code {
	List<CartProductResponse> cartProducts = null;
	string Message = "Loading Products .....";
	bool IsAuthenticated = false;

	protected override async Task OnInitializedAsync()
	{
		await LoadCart();
		IsAuthenticated = await AuthService.IsUserAuthenticated();
	}

	public async Task LoadCart()
	{
		await CartService.GetCartItemsCount();
		cartProducts = await CartService.GetCartProducts();
		if (cartProducts == null || cartProducts.Count == 0)
		{
			Message = "Your Cart is Empty.";
		}
	}

	public async Task RemoveProductFromCart(int productId , int productTypeId)
	{
		await CartService.RemoveProductFromCart(productId, productTypeId);
		await LoadCart();
	}

	public async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
	{
		product.Quantity = int.Parse(e.Value.ToString());
		if (product.Quantity < 1)
			product.Quantity = 1;

		await CartService.UpdateQuantity(product);
	}

	private async Task PlaceOrder()
	{
		string url = await OrderService.PlaceOrder();
		navManager.NavigateTo(url);
	}
}

@page "/product/{id:int}"
@using EcommerceBlazor.Shared;
@inject IProductService productService
@inject ICartService cartService

@if(product == null)
{
	<br />
	<span style="font-size:20px">@Message</span>
}
else
{
	<div class="media">
		<div class="media-img-wrapper mr-2">
			@if (!string.IsNullOrEmpty(product.ImageURL))
			{
				<img class="media-img" src="@product.ImageURL" alt="@product.Title" />
			}
			else
			{
				<MudCarousel Class="mud-width-full" ItemsSource="@product.Images" Style="height:200px;">
					<ItemTemplate>
						<MudImage Src="@context.Data"></MudImage>
					</ItemTemplate>
				</MudCarousel>
			}
			
		</div>
		<div class="media-body">
			<h2 class="mb-0">@product.Title</h2>
			<p>@product.Description</p>
			@if(product.Variants != null && product.Variants.Count > 1)
			{
				<div class="mb-3">
					<select class="form-select" @bind="currentTypeId">
						@foreach(var variant in product.Variants)
						{
							<option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
						}
					</select>
				</div>
			}
			@if(GetSelectedVariant() != null)
			{
				@if(GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
				{
					<h6 class="text-muted original-price">
						$@GetSelectedVariant().OriginalPrice
					</h6>
				}
			}
			<h4 class="price">
				$@GetSelectedVariant().Price
			</h4>

			<button class="btn btn-primary" @onclick="AddToCart">
				<i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add To Cart
			</button>

			
		</div>
	</div>
}

@code {
	public Product product { get; set; } = null;

	[Parameter]
	public int Id { get; set; }

	public string Message { get; set; } = string.Empty;

	private int currentTypeId = 1;

	protected override async Task OnParametersSetAsync()
	{;
		Message = "Loading Product ......";
		var response = await productService.GetByIdAsync(Id);
		if (response.Success)
		{
			product = response.Data;
			if(product.Variants.Count > 0)
			{
				currentTypeId = product.Variants[0].ProductTypeId;
			}
		}
		else
		{
			Message = response.Message;
		}
		base.OnParametersSetAsync();
	}

	public ProductVariant GetSelectedVariant()
	{
		var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
		return variant;
	}

	public async Task AddToCart()
	{
		var productVariant = GetSelectedVariant();

		var cartItem = new CartItem
		{
			ProductId = productVariant.ProductId,
			ProductTypeId = productVariant.ProductTypeId
		};

		await cartService.AddToCartAsync(cartItem);
	}
}
